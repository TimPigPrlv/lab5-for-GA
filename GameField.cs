namespace TetrisGame
{
/// <summary>
/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –¢–µ—Ç—Ä–∏—Å–∞, –≤–∫–ª—é—á–∞—è –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è —Ñ–∏–≥—É—Ä,
/// –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –∏ –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤.
/// </summary>
public class GameField
{
    private readonly int[,] _matrix;
    private readonly int _rows;
    private readonly int _columns;
    private TetrisFigure? _activeFigure;
    private Position? _activePosition;

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –≤ –∏–≥—Ä–µ.
    /// </summary>
    public int Score { get; private set; }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ <see cref="GameField"/>.
    /// </summary>
    /// <param name="rows">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.</param>
    /// <param name="columns">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.</param>
    public GameField(int rows, int columns)
    {
        _rows = rows;
        _columns = columns;
        _matrix = new int[rows, columns];
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã –¢–µ—Ç—Ä–∏—Å–∞.
    /// </summary>
    /// <returns><see langword="true"/> –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ; –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ <see langword="false"/>.</returns>
    public bool HasSpaceForNewFigure()
    {
        for (int col = 0; col < _columns; col++)
        {
            if (_matrix[0, col] != 0)
            {
                return false;
            }
        }
        return true;
    }

    /// <summary>
    /// –ü–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞ –¢–µ—Ç—Ä–∏—Å–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è.
    /// </summary>
    /// <param name="figure">–§–∏–≥—É—Ä–∞ –¢–µ—Ç—Ä–∏—Å–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è.</param>
    /// <exception cref="InvalidOperationException">–í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã.</exception>
    public void SpawnFigure(TetrisFigure figure)
    {
        Console.WriteLine("–ü–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–∞—è —Ñ–∏–≥—É—Ä–∞");
        _activeFigure = figure;
        _activePosition = new Position(0, (_columns - figure.Width) / 2);

        if (CalculateCollision(_activePosition, figure) != CollistionType.None)
        {
            throw new InvalidOperationException("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑—ã–≤–∞—é—â–µ–µ, –º–æ–∂–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è —Ñ–∏–≥—É—Ä–∞ –µ—â—ë –¥–≤–∏–≥–∞—Ç—å—Å—è.
    /// </summary>
    public bool CanMoveCurrentFigure => _activeFigure != null && _activePosition != null;

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ñ–∏–≥—É—Ä—ã –¢–µ—Ç—Ä–∏—Å–∞.
    /// </summary>
    /// <param name="direction">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å —Ñ–∏–≥—É—Ä—É.</param>
    public void HandleMove(Movement direction)
    {
        if (_activeFigure == null || _activePosition == null)
        {
            return;
        }

        Console.WriteLine($"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {_activePosition.Row}, {_activePosition.Column}");

        Position newPosition = direction switch
        {
            Movement.Left => _activePosition with { Column = _activePosition.Column - 1 },
            Movement.Right => _activePosition with { Column = _activePosition.Column + 1 },
            Movement.Down => _activePosition with { Row = _activePosition.Row + 1 },
            _ => _activePosition
        };

        Console.WriteLine($"–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: {newPosition.Row}, {newPosition.Column}");

        if (direction == Movement.Rotate)
        {
            var rotatedFigure = _activeFigure.Rotate();
            if (CalculateCollision(_activePosition, rotatedFigure) == CollistionType.None)
            {
                _activeFigure = rotatedFigure;
            }
            else
            {
                Console.WriteLine("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–≥—É—Ä—É, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª–æ–∫–∏.");
            }
        }
        else
        {
            if (CalculateCollision(newPosition, _activeFigure) == CollistionType.None)
            {
                _activePosition = newPosition;
            }
            else
            {
                var collision = CalculateCollision(newPosition, _activeFigure);
                if (collision == CollistionType.Left || collision == CollistionType.Right)
                {
                    Console.WriteLine($"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è {direction}, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑.");
                    HandleMove(Movement.Down);
                }
                else
                {
                    if (direction == Movement.Down)
                    {
                        Console.WriteLine("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑, –ø–æ–º–µ—â–∞–µ–º —Ñ–∏–≥—É—Ä—É –Ω–∞ –ø–æ–ª–µ.");
                        PlaceFigure(_activePosition, _activeFigure);
                        FixCurrentFigure();
                    }
                }
            }
        }
    }

    private void FixCurrentFigure()
    {
        _activeFigure = null;
        _activePosition = null;
        ClearFullRows();
    }

    private void ClearFullRows()
    {
        for (int row = 0; row < _rows; row++)
        {
            if (IsRowFull(row))
            {
                ClearRow(row);
                DropRowsAbove(row);
                Score += 10;
            }
        }
    }

    private bool IsRowFull(int row)
    {
        for (int col = 0; col < _columns; col++)
        {
            if (_matrix[row, col] == 0)
                return false;
        }
        return true;
    }

    private void ClearRow(int row)
    {
        for (int col = 0; col < _columns; col++)
            _matrix[row, col] = 0;
    }

    private void DropRowsAbove(int row)
    {
        for (int i = row; i > 0; i--)
        {
            for (int col = 0; col < _columns; col++)
            {
                _matrix[i, col] = _matrix[i - 1, col];
            }
        }
        for (int col = 0; col < _columns; col++)
        {
            _matrix[0, col] = 0;
        }
    }

    private CollistionType CalculateCollision(Position position, TetrisFigure figure)
    {
        for (int i = 0; i < figure.Height; i++)
        {
            for (int j = 0; j < figure.Width; j++)
            {
                if (figure.Shape[i, j] == 1)
                {
                    int row = position.Row + i;
                    int col = position.Column + j;
                    if (row < 0)
                    {
                        return CollistionType.Bottom;
                    }
                    if (row >= _rows)
                    {
                        return CollistionType.Block;
                    }
                    if (col < 0)
                    {
                        return CollistionType.Left;
                    }
                    if (col >= _columns)
                    {
                        return CollistionType.Right;
                    }
                    if (_matrix[row, col] == 1)
                    {
                        return CollistionType.Block;
                    }
                }
            }
        }
        return CollistionType.None;
    }

    private enum CollistionType
    {
        None,
        Left,
        Right,
        Bottom,
        Block
    }

    private void PlaceFigure(Position position, TetrisFigure figure)
    {
        for (int i = 0; i < figure.Height; i++)
        {
            for (int j = 0; j < figure.Width; j++)
            {
                if (figure.Shape[i, j] == 1)
                {
                    _matrix[position.Row + i, position.Column + j] = 1;
                }
            }
        }
    }

    private void ClearActiveFigure()
    {
        if (_activeFigure == null || _activePosition == null)
            return;

        for (int i = 0; i < _activeFigure.Height; i++)
        {
            for (int j = 0; j < _activeFigure.Width; j++)
            {
                if (_activeFigure.Shape[i, j] == 1)
                {
                    _matrix[_activePosition.Row + i, _activePosition.Column + j] = 0;
                }
            }
        }
    }

    /// <summary>
    /// –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏ —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É –¢–µ—Ç—Ä–∏—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏.
    /// </summary>
    public void Render()
    {
        Console.WriteLine("‚ïî" + new string('‚ïê', _columns * 3) + "‚ïó");

        for (int i = 0; i < _rows; i++)
        {
            Console.Write("‚ïë");
            for (int j = 0; j < _columns; j++)
            {
                if (_matrix[i, j] == 1)
                {
                    Console.Write("üü¶ ");
                }
                else
                {
                    if (_activeFigure != null && _activePosition != null &&
                         IsPartOfActiveFigure(i, j, _activePosition, _activeFigure))
                    {
                        Console.Write("üü¶ ");
                    }
                    else
                    {
                        Console.Write("‚¨ú ");
                    }
                }
            }
            Console.WriteLine("‚ïë");
        }

        Console.WriteLine("‚ïö" + new string('‚ïê', _columns * 3) + "‚ïù");

        if (_activeFigure != null && _activePosition != null)
        {
            Console.WriteLine($"–¢–µ–∫—É—â–∞—è —Ñ–∏–≥—É—Ä–∞: \n{_activeFigure}");
        }
    }
private bool IsPartOfActiveFigure(int row, int col, Position position, TetrisFigure figure)
{
    for (int i = 0; i < figure.Height; i++)
    {
        for (int j = 0; j < figure.Width; j++)
        {
            if (figure.Shape[i, j] == 1 &&
                position.Row + i == row &&
                position.Column + j == col)
            {
                return true;
            }
        }
    }
    return false;
}

/// <summary>
/// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ.
/// </summary>
/// <param name="Row">–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏.</param>
/// <param name="Column">–ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞.</param>
public record Position(int Row, int Column); //–ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Å–µ–º–∞–Ω—Ç–∏–∫–æ–π –∑–Ω–∞—á–µ–Ω–∏–π
}
}
