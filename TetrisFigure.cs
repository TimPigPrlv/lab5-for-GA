namespace TetrisGame
{
    /// <summary>
    /// –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–≥—É—Ä—É –¢–µ—Ç—Ä–∏—Å–∞, –≤–∫–ª—é—á–∞—è –µ—ë —Ñ–æ—Ä–º—É, —Ç–∏–ø –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –≤—Ä–∞—â–µ–Ω–∏–µ.
    /// </summary>
    /// <param name="Shape">–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π —Ñ–æ—Ä–º—É —Ñ–∏–≥—É—Ä—ã.</param>
    /// <param name="Type">–¢–∏–ø —Ñ–∏–≥—É—Ä—ã, –∫–∞–∫ <see cref="ShapeType"/>.</param>
    public record TetrisFigure(int[,] Shape, ShapeType Type)
    {
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Ñ–∏–≥—É—Ä—ã.
        /// </summary>
        public int Width => Shape.GetLength(1);

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Å–æ—Ç—É —Ñ–∏–≥—É—Ä—ã.
        /// </summary>
        public int Height => Shape.GetLength(0);

        /// <summary>
        /// –í—Ä–∞—â–∞–µ—Ç —Ñ–∏–≥—É—Ä—É –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ.
        /// </summary>
        /// <returns>–ù–æ–≤–∞—è <see cref="TetrisFigure"/>, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –≤—Ä–∞—â—ë–Ω–Ω—É—é —Ñ–æ—Ä–º—É.</returns>
        public TetrisFigure Rotate()
        {
            int newHeight = Width;
            int newWidth = Height;
            var rotatedShape = new int[newHeight, newWidth];

            for (int i = 0; i < Height; i++)
            {
                for (int j = 0; j < Width; j++)
                {
                    rotatedShape[j, newWidth - i - 1] = Shape[i, j];
                }
            }

            return new TetrisFigure(rotatedShape, Type);
        }

        /// <summary>
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ñ–∏–≥—É—Ä—ã.
        /// </summary>
        /// <returns>–°—Ç—Ä–æ–∫–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è —Ñ–æ—Ä–º—É —Ñ–∏–≥—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–º–≤–æ–ª–æ–≤.</returns>
        public override string ToString()
        {
            var sb = new System.Text.StringBuilder();
            for (int i = 0; i < Height; i++)
            {
                for (int j = 0; j < Width; j++)
                {
                    sb.Append(Shape[i, j] == 1 ? "üü¶" : "‚¨ú");
                }
                sb.AppendLine();
            }
            return sb.ToString();
        }
    }
}